{"version":3,"sources":["../server/Mutation.js"],"names":[],"mappings":";;;;;;AAAA,kCAGiB;;AAEjB,+CAA+E;;kBAEhE,+BAAsB;AACnC,MAAI,EAAE,UAAU;AAChB,aAAW,EAAE,qCAAqC;AAClD,QAAM,oBAAG;AACP,WAAO;AACL,iBAAW,EAAE;AACX,YAAI,yBAAc;AAClB,mBAAW,EAAE,4CAA4C;AACzD,YAAI,yBAAc;AAClB,eAAO,mBAAC,CAAC,EAAC,IAAI,EAAC;AACb,iBAAO,yBAAc,MAAM,CAAC;AAC1B,iBAAK,EAAE,IAAI,CAAC,KAAK;AACjB,oBAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC;AAC5B,qBAAS,EAAE,IAAI,CAAC,SAAS,IAAI,EAAE;AAC/B,kBAAM,EAAE,IAAI,CAAC,MAAM;AACnB,oBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,oBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,uBAAW,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;AACvC,qBAAS,EAAE,IAAI,CAAC,SAAS;AACzB,oBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,sBAAU,EAAE,CAAC;WACd,CAAC,CAAC;SACJ;;OACF;;AAED,gBAAU,EAAE;AACV,YAAI,qBAAY;AAChB,mBAAW,EAAE,uEAAuE;AACpF,YAAI,yBAAc;AAClB,eAAO,mBAAC,CAAC,EAAC,IAAI,EAAE;AACd,cAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC/B,iBAAO,IAAI,CAAC,QAAQ,CAAC;AACrB,iBAAO,yBAAc,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACrF;OACF;;AAED,oBAAc,EAAE;AACd,YAAI,qBAAY;AAChB,mBAAW,EAAE,mFAAmF;AAChG,YAAI,yBAAc;AAClB,eAAO,mBAAC,CAAC,EAAC,IAAI,EAAC;AACb,cAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AACpB,cAAM,MAAM,GAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;AACtE,cAAM,OAAO,GAAG,yBAAc,MAAM,CAAC,IAAI,EACvC,EAAE,KAAK,EAAE,MAAM,EAAE,CAClB,CAAC;;AAEF,iBAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACnB;;OACF;;AAAA,KAEF;AAAA,GACF;;CACF,CAAC","file":"Mutation.js","sourcesContent":["import {\r\n  GraphQLObjectType,\r\n  GraphQLInt\r\n} from 'graphql';\r\n\r\nimport { ForecastModel, ForecastType, ForecastArgs } from './models/forecasts';\r\n\r\nexport default new GraphQLObjectType({\r\n  name: 'Mutation',\r\n  description: 'Adding or Changing Forecasts in SQL',\r\n  fields (){\r\n    return {\r\n      addForecast: {\r\n        type: ForecastType,\r\n        description: 'Insert a new Forecast into the User table.',\r\n        args: ForecastArgs,\r\n        resolve(_,args){\r\n          return ForecastModel.create({\r\n            bunit: args.bunit,\r\n            party_id: args.party_id || 0,\r\n            portfolio: args.portfolio || '',\r\n            season: args.season,\r\n            position: args.position,\r\n            currency: args.currency,\r\n            settle_date: new Date(args.settle_date),\r\n            reference: args.reference,\r\n            mongo_id: args.mongo_id,\r\n            hasChanged: 0\r\n          });\r\n        } // resolve\r\n      }, // addForecast\r\n\r\n      setMongoId: {\r\n        type: GraphQLInt,\r\n        description: 'Set the mongo_id of a forecast, using other fields as the identifier.',\r\n        args: ForecastArgs,\r\n        resolve(_,args) {\r\n          const mongo_id = args.mongo_id;\r\n          delete args.mongo_id;\r\n          return ForecastModel.update({ mongo_id: mongo_id, hasChanged: 0 }, { where: args });\r\n        }\r\n      },\r\n\r\n      updateForecast: {\r\n        type: GraphQLInt,\r\n        description: 'Update an existing Forecast in the User table. Identify by either id or mongo_id!',\r\n        args: ForecastArgs,\r\n        resolve(_,args){\r\n          args.hasChanged = 0;\r\n          const search= { $or: [{ mongo_id: args.mongo_id }, { id: args.id }] };\r\n          const retvals = ForecastModel.update(args,\r\n            { where: search }\r\n          );\r\n\r\n          return retvals[0];\r\n        } // resolve\r\n      } // updateForecast\r\n\r\n    } // return\r\n  } // fields\r\n}); // Mutation\r\n"]}