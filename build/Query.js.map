{"version":3,"sources":["../server/Query.js"],"names":[],"mappings":";;;;;;AAAA,kCAGiB;;AAEjB,+CAA+E;;kBAEhE,+BAAsB;AACnC,MAAI,EAAE,OAAO;AACb,aAAW,EAAE,4BAA4B;AACzC,QAAM,EAAE,kBAAM;AACZ,WAAO;AACL,eAAS,EAAE;AACT,YAAI,EAAE,iDAA6B;AACnC,YAAI,yBAAc;AAClB,eAAO,mBAAC,IAAI,EAAE,IAAI,EAAE;AAClB,cAAM,IAAI,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;AAE7B,cAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;AACrC,gBAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,mBAAO,IAAI,CAAC,UAAU,CAAC;AACvB,gBAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;WAC5C;AACD,iBAAO,yBAAc,OAAO,CAAC,IAAI,CAAC,CAAC;SACpC;OACF;KACF,CAAA;GACF;CACF,CAAC","file":"Query.js","sourcesContent":["import {\r\n  GraphQLObjectType,\r\n  GraphQLList\r\n} from 'graphql';\r\n\r\nimport { ForecastModel, ForecastType, ForecastArgs } from './models/forecasts';\r\n\r\nexport default new GraphQLObjectType({\r\n  name: 'Query',\r\n  description: 'This is our Forecast query',\r\n  fields: () => {\r\n    return {\r\n      forecasts: {\r\n        type: new GraphQLList(ForecastType),\r\n        args: ForecastArgs,\r\n        resolve(root, args) {\r\n          const opts = { where: args };\r\n\r\n          if (args.hasOwnProperty(\"hasChanged\")) {\r\n            const hasChanged = args.hasChanged;\r\n            delete args.hasChanged;\r\n            opts.where.hasChanged = hasChanged ? 1 : 0;\r\n          }\r\n          return ForecastModel.findAll(opts);\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n"]}